Debug line: 3
Debug variable update: 'testChar' = (char)1
Debug line: 4
Debug variable update: 'testInt32' = (int32)2
Debug line: 5
Debug variable update: 'testInt64' = (int64)3
Debug line: 6
Debug variable update: 'testUint32' = (uint32)4
Debug line: 7
Debug variable update: 'testUint64' = (uint64)5
Debug line: 8
Debug variable update: 'testFloat32' = (float32)6.000000
Debug line: 9
Debug variable update: 'testFloat64' = (float64)7.000000
Debug line: 11
Invoke function: pointer=(pointer)NULL, symbol=6, parameter #0=(string)"Original primitive values", parameter #1=(char)1, parameter #2=(int32)2, parameter #3=(int64)3, parameter #4=(uint32)4, parameter #5=(uint64)5, parameter #6=(float32)6.000000, parameter #7=(float64)7.000000
Debug line: 13
Debug variable update: 'testChar' = (char)2
Debug line: 14
Debug variable update: 'testInt32' = (int32)3
Debug line: 15
Debug variable update: 'testInt64' = (int64)4
Debug line: 16
Debug variable update: 'testUint32' = (uint32)5
Debug line: 17
Debug variable update: 'testUint64' = (uint64)6
Debug line: 18
Debug variable update: 'testFloat32' = (float32)7.000000
Debug line: 19
Debug variable update: 'testFloat64' = (float64)8.000000
Debug line: 21
Invoke function: pointer=(pointer)NULL, symbol=6, parameter #0=(string)"Incremented", parameter #1=(char)2, parameter #2=(int32)3, parameter #3=(int64)4, parameter #4=(uint32)5, parameter #5=(uint64)6, parameter #6=(float32)7.000000, parameter #7=(float64)8.000000
Debug line: 23
Debug variable update: 'testChar' = (char)1
Debug line: 24
Debug variable update: 'testInt32' = (int32)2
Debug line: 25
Debug variable update: 'testInt64' = (int64)3
Debug line: 26
Debug variable update: 'testUint32' = (uint32)4
Debug line: 27
Debug variable update: 'testUint64' = (uint64)5
Debug line: 28
Debug variable update: 'testFloat32' = (float32)6.000000
Debug line: 29
Debug variable update: 'testFloat64' = (float64)7.000000
Debug line: 31
Invoke function: pointer=(pointer)NULL, symbol=6, parameter #0=(string)"Decremented", parameter #1=(char)1, parameter #2=(int32)2, parameter #3=(int64)3, parameter #4=(uint32)4, parameter #5=(uint64)5, parameter #6=(float32)6.000000, parameter #7=(float64)7.000000
Debug line: 33
Invoke function: pointer=(pointer)NULL, symbol=5, 
Debug variable update: 'o' = (Object)globalObject
Debug line: 34
Assign property: pointer=(Object)globalObject, symbol=9, value=(int32)1
Debug line: 35
Assign property: pointer=(Object)globalObject, symbol=8, value=(float32)2.000000
Debug line: 36
Assign subscript: pointer=(Object)globalObject, index=(int32)0, value=(int32)3
Debug line: 37
Assign subscript: pointer=(Object)globalObject, index=(float32)0.000000, value=(float32)4.000000
Debug line: 39
Invoke function: pointer=(Object)globalObject, symbol=9, 
Invoke function: pointer=(Object)globalObject, symbol=8, 
Invoke subscript: pointer=(Object)globalObject, index=(int32)0
Invoke subscript: pointer=(Object)globalObject, index=(float32)0.000000
Invoke function: pointer=(pointer)NULL, symbol=6, parameter #0=(string)"Original object values", parameter #1=(int32)1, parameter #2=(float32)2.000000, parameter #3=(int32)3, parameter #4=(float32)4.000000
Debug line: 41
Invoke function: pointer=(Object)globalObject, symbol=9, 
Assign property: pointer=(Object)globalObject, symbol=9, value=(int32)2
Debug line: 42
Invoke function: pointer=(Object)globalObject, symbol=8, 
Assign property: pointer=(Object)globalObject, symbol=8, value=(float32)3.000000
Debug line: 43
Invoke subscript: pointer=(Object)globalObject, index=(int32)0
Assign subscript: pointer=(Object)globalObject, index=(int32)0, value=(int32)4
Debug line: 44
Invoke subscript: pointer=(Object)globalObject, index=(float32)0.000000
Assign subscript: pointer=(Object)globalObject, index=(float32)0.000000, value=(float32)5.000000
Debug line: 46
Invoke function: pointer=(Object)globalObject, symbol=9, 
Invoke function: pointer=(Object)globalObject, symbol=8, 
Invoke subscript: pointer=(Object)globalObject, index=(int32)0
Invoke subscript: pointer=(Object)globalObject, index=(float32)0.000000
Invoke function: pointer=(pointer)NULL, symbol=6, parameter #0=(string)"Incremented", parameter #1=(int32)2, parameter #2=(float32)3.000000, parameter #3=(int32)4, parameter #4=(float32)5.000000
Debug line: 48
Invoke function: pointer=(Object)globalObject, symbol=9, 
Assign property: pointer=(Object)globalObject, symbol=9, value=(int32)1
Debug line: 49
Invoke function: pointer=(Object)globalObject, symbol=8, 
Assign property: pointer=(Object)globalObject, symbol=8, value=(float32)2.000000
Debug line: 50
Invoke subscript: pointer=(Object)globalObject, index=(int32)0
Assign subscript: pointer=(Object)globalObject, index=(int32)0, value=(int32)3
Debug line: 51
Invoke subscript: pointer=(Object)globalObject, index=(float32)0.000000
Assign subscript: pointer=(Object)globalObject, index=(float32)0.000000, value=(float32)4.000000
Debug line: 53
Invoke function: pointer=(Object)globalObject, symbol=9, 
Invoke function: pointer=(Object)globalObject, symbol=8, 
Invoke subscript: pointer=(Object)globalObject, index=(int32)0
Invoke subscript: pointer=(Object)globalObject, index=(float32)0.000000
Invoke function: pointer=(pointer)NULL, symbol=6, parameter #0=(string)"Decremented", parameter #1=(int32)1, parameter #2=(float32)2.000000, parameter #3=(int32)3, parameter #4=(float32)4.000000
