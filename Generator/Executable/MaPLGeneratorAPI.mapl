
/**
 * Data Structures.
 */
// Base type gives a common ancestor so pointers stored in
// ScriptParameters can be cast back to original type.
#type MaPLGeneratorObject {}

#type Array<T> : MaPLGeneratorObject {
    readonly T[uint32];
    readonly uint32 count;
}

#type ArrayMap<T> : Array<T> {
    readonly T[string];
    bool contains(string key);
}

/**
 * Schema.
 */
#global readonly ArrayMap<Schema> schemas;

#type Schema : MaPLGeneratorObject {
    readonly string namespace;
    readonly ArrayMap<SchemaEnum> enums;
    readonly ArrayMap<SchemaClass> classes;
}

#type SchemaEnum : MaPLGeneratorObject {
    readonly string name;
    readonly ArrayMap<string> cases;
    readonly ArrayMap<string> annotations;
}

#type SchemaClass : MaPLGeneratorObject {
    readonly string name;
    readonly string superclass;
    readonly string superclassNamespace;
    readonly ArrayMap<SchemaAttribute> attributes;
    readonly ArrayMap<string> annotations;
}

#type SchemaAttribute : MaPLGeneratorObject {
    readonly string name;
    readonly string typeName;
    readonly string typeNamespace;
    readonly bool typeIsUIDReference;
    readonly bool typeIsClass;
    readonly bool typeIsEnum;
    readonly ArrayMap<string> annotations;
    readonly Array<string> defaultValues;
    readonly uint32 minOccurrences;
    readonly uint32 maxOccurrences;
}

/**
 * XML.
 */
#global readonly Array<XMLFile> xmlFiles;

#type XMLFile : MaPLGeneratorObject {
    readonly XMLNode rootNode;
    readonly string filePath;
}

#type XMLNode : MaPLGeneratorObject {
    readonly string name;
    readonly string namespace;
    readonly ArrayMap<XMLAttribute> attributes;
    readonly Array<XMLNode> children;
    
    // Children filtered by schema sequence. Using this data structure guarantees
    // that your script assigns children to the same sequence as the XML validator.
    readonly ArrayMap<Array<XMLNode>> childrenBySequence;
}

#type XMLAttribute : MaPLGeneratorObject {
    readonly string name;
    readonly string value;
    
    // Some attributes can be interpreted as a list of values.
    // `values` is the list representation of a comma-delimited `value`.
    readonly Array<string> values;
}

/**
 * File IO.
 */
#global void outputToFile(string filePath);
// Returns the file name without the preceding path or file extension.
#global string fileStemForPath(string filePath);
// Writes the byte representation of the parameters to file, in parameter order.
#global void writeToFile(...);

/**
 * Script invocation.
 */
#type ScriptParameters {
    MaPLGeneratorObject [string];
}
// Parameters that were passed into this script.
#global readonly ScriptParameters inParameters;
// Parameters that this script is passing into 'executeMaPLScript'.
#global readonly ScriptParameters outParameters;
#global void executeMaPLScript(string filePath);

/**
 * Misc utilities.
 */
#global string commandLineFlag(string flagName);
#global uint64 hash(string plaintext);
