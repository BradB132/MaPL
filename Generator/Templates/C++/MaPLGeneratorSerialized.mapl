#import "../../Executable/MaPLGeneratorAPI.mapl"

string outputDir = commandLineFlag("cppOutputDir");
outputToFile(outputDir + "/MaPLGeneratorSerialized.hpp");

<?// Generated by MaPLGenerator.

#ifndef MaPLGeneratorSerialized_h
#define MaPLGeneratorSerialized_h

#include <vector>

/**
 * Abstract class that described how generated objects are serialized / deserialized.
 */
class MaPLGeneratorSerialized {
public:
    virtual bool initializeObjectWithData(uint8_t *data, size_t *dataIndex, size_t dataLength) = 0;
    virtual bool initializeAttributeWithData(uint8_t *data, size_t *dataIndex, size_t dataLength) = 0;
    virtual void writeObjectToVector(std::vector<uint8_t> &data) = 0;
    virtual void writeAttributesToVector(std::vector<uint8_t> &data) = 0;
    virtual void writeChildrenToVector(std::vector<uint8_t> &data) = 0;
};

?>

for uint32 schemaIndex = 0; schemaIndex < schemas.count; schemaIndex++ {
    Schema schema = schemas[schemaIndex];
    string schemaNamespace = schema.namespace;

    for uint32 classIndex = 0; classIndex < schema.classes.count; classIndex++ {
        SchemaClass schemaClass = schema.classes[classIndex];
        string className = schemaClass.name;
        uint32 classHash = (uint32)hash("CLASS_" + schemaNamespace + "_" + className);
        <?#define BYTECODE_${schemaNamespace}_${className} ${classHash}
?>
        
        for uint32 attrIndex = 0; attrIndex < schemaClass.attributes.count; attrIndex++ {
            SchemaAttribute attribute = schemaClass.attributes[attrIndex];
            string attributeName = attribute.name;
            uint32 attributeHash = (uint32)hash("ATTRIBUTE_" + schemaNamespace + "_" + className + "_" + attributeName);
            <?#define BYTECODE_${schemaNamespace}_${className}_${attributeName} ${attributeHash}
?>
        }
        <?
?>
    }
}

<?#endif /* MaPLGeneratorSerialized_h */
?>
