#import "../../Executable/MaPLGeneratorAPI.mapl"

Schema schema = (Schema)inParameters["schema"];
SchemaClass schemaClass = (SchemaClass)inParameters["class"];

string schemaNamespace = schema.namespace;
string className = schemaClass.name;

string outputDir = commandLineFlag("cppOutputDir");
outputToFile(outputDir + "/" + schemaNamespace + "/" + className + "_generated.cpp");

bool useMaPLInterface = (bool)commandLineFlag("MaPLInterface");
bool useMaPLGeneratorSerialized = (bool)commandLineFlag("MaPLGeneratorSerialized");

<?// Generated by MaPLGenerator, based on the '${schemaNamespace}::${className}' schema.

#include "${schemaNamespace}/${className}_generated.hpp"
?>

for uint32 attrIndex = 0; attrIndex < schemaClass.attributes.count; attrIndex++ {
    SchemaAttribute attribute = schemaClass.attributes[attrIndex];
    if attribute.typeIsClass {
        string typeName = attribute.typeName;
        string classKey = "include:" + attribute.typeNamespace + "::" + typeName;
        
        // Hack: `outParameters` is intended as a means of passing objects between scripts,
        // but here it's used to flag if we've already seen this class.
        if outParameters[classKey] == NULL {
            <?#include "${schemaNamespace}/${typeName}.hpp"
?>
            outParameters[classKey] = attribute; // For this hack, any non-NULL value works.
        }
        SchemaClass attributeClass = schemas[attribute.typeNamespace].classes[attribute.typeName];
        for uint32 descendantIndex = 0; descendantIndex < attributeClass.descendantClasses.count; descendantIndex++ {
            SchemaClass descendant = attributeClass.descendantClasses[descendantIndex];
            typeName = descendant.name;
            classKey = "include:" + descendant.namespace + "::" + typeName;
            if outParameters[classKey] == NULL {
                <?#include "${schemaNamespace}/${typeName}.hpp"
?>
                outParameters[classKey] = attribute; // For this hack, any non-NULL value works.
            }
        }
    }
}

if useMaPLInterface {
    string symbolPrefix = commandLineFlag("MaPLSymbolPrefix");
    <?#include "${symbolPrefix}.h"  // Use MaPLCompiler to generate this symbol file.
?>
}

if useMaPLGeneratorSerialized {
    for uint32 attrIndex = 0; attrIndex < schemaClass.attributes.count; attrIndex++ {
        if schemaClass.attributes[attrIndex].typeName == "string" {
            <?#include <cstring>
?>
            break;
        }
    }
    if schemaClass.annotations.contains("root") {
        <?#include "${schemaNamespace}/${className}.hpp"
#include <fstream>
?>
    }
}

<?
${schemaNamespace}::${className}_generated::${className}_generated()?>
for uint32 attrIndex = 0; attrIndex < schemaClass.attributes.count; attrIndex++ {
    if schemaClass.attributes[attrIndex].defaultValues.count > 0 {
        <? : ?>
        break;
    }
}
bool firstDefaultAttribute = true;
for uint32 attrIndex = 0; attrIndex < schemaClass.attributes.count; attrIndex++ {
    SchemaAttribute attribute = schemaClass.attributes[attrIndex];
    if attribute.defaultValues.count > 0 {
        string attributeName = attribute.name;
        string attributeValue;
        if attribute.defaultValues.count == 1 {
            string defaultValue = attribute.defaultValues[0];
            if attribute.typeIsEnum {
                attributeValue = attribute.typeName + "_" + defaultValue;
            } else {
                attributeValue = defaultValue;
            }
        } else {
            attributeValue = "{ ";
            for uint32 defaultIndex = 0; defaultIndex < attribute.defaultValues.count; defaultIndex++ {
                string defaultValue = attribute.defaultValues[defaultIndex];
                if attribute.typeIsEnum {
                    attributeValue += attribute.typeName + "_" + defaultValue;
                } else {
                    attributeValue += defaultValue;
                }
                if defaultIndex < attribute.defaultValues.count-1 {
                    attributeValue +=  ", ";
                }
            }
            attributeValue += " }";
        }
        if !firstDefaultAttribute {
            <?,?>
        }
        firstDefaultAttribute = false;
        <?
    ${attributeName}(${attributeValue})?>
    }
}
<? {
}

${schemaNamespace}::${className}_generated::~${className}_generated() {
?>
for uint32 attrIndex = 0; attrIndex < schemaClass.attributes.count; attrIndex++ {
    SchemaAttribute attribute = schemaClass.attributes[attrIndex];
    if attribute.typeIsClass {
        string attributeName = attribute.name;
        if attribute.minOccurrences < 1 || attribute.maxOccurrences > 1 {
            string dataType = attribute.typeNamespace + "::" + attribute.typeName;
            string collectionIvar = useMaPLInterface ? "._backingVector" : "";
<?    for (${dataType} *value : ${attributeName}${collectionIvar}) {
        delete value;
    }
?>
        } else {
<?    delete ${attributeName};
?>
        }
    }
}
<?}

?>

if useMaPLGeneratorSerialized {
    if schemaClass.annotations.contains("root") {
<?bool ${schemaNamespace}::${className}_generated::readFromFile(const std::filesystem::path& filePath, ${schemaNamespace}::${className}* initializedObject) {
    std::ifstream inputStream(filePath, std::ios::binary|std::ios::ate);
    if (!inputStream) {
        return false;
    }
    size_t byteLength = inputStream.tellg();
    if (!byteLength) {
        return false;
    }
    inputStream.seekg(0, std::ios::beg);
    u_int8_t bytecode[byteLength];
    inputStream.read((char *)bytecode, byteLength);
    if (inputStream.rdstate()) {
        return false;
    }
    uint16_t endianShort = 1;
    uint8_t endianByte = *(uint8_t *)&endianShort;
    if (endianByte != bytecode[0]) {
        return false;
    }
    size_t dataIndex = 1;
    return initializedObject->initializeObjectWithData(bytecode, &dataIndex, byteLength) && dataIndex == byteLength;
}

bool ${schemaNamespace}::${className}_generated::writeToFile(const std::filesystem::path& filePath) {
    std::vector<uint8_t> outputBytes;
    uint16_t endianShort = 1;
    uint8_t endianByte = *(uint8_t *)&endianShort;
    outputBytes.push_back(endianByte);
    this->writeObjectToVector(outputBytes);
    std::ofstream outputStream(filePath, std::ios::binary);
    if (!outputStream) {
        return false;
    }
    outputStream.write((char *)&(outputBytes[0]), outputBytes.size());
    return !outputStream.bad();
}

?>
    }
<?/**
 * MaPLGeneratorSerialized.
 */
bool ${schemaNamespace}::${className}_generated::initializeObjectWithData(uint8_t *data, size_t *dataIndex, size_t dataLength) {
    if (*dataIndex+sizeof(uint32_t) > dataLength ||
        *((uint32_t*)(data+*dataIndex)) != BYTECODE_${schemaNamespace}_${className}) {
        return false;
    }
    *dataIndex += sizeof(uint32_t);
    while (initializeAttributeWithData(data, dataIndex, dataLength)) {}
    return true;
}

bool ${schemaNamespace}::${className}_generated::initializeAttributeWithData(uint8_t *data, size_t *dataIndex, size_t dataLength) {
    if (*dataIndex+sizeof(uint32_t) > dataLength) {
        return false;
    }
    uint32_t nextAttributeName = *((uint32_t*)(data+*dataIndex));
    *dataIndex += sizeof(uint32_t);
    switch (nextAttributeName) {
?>
    for uint32 i = 0; i < schemaClass.attributes.count; i++ {
        SchemaAttribute attribute = schemaClass.attributes[i];
        string attributeName = attribute.name;
<?        case BYTECODE_${schemaNamespace}_${className}_${attributeName}: {
?>
        // Handle lists of values.
        bool requiresList = attribute.minOccurrences < 1 || attribute.maxOccurrences > 1;
        string indent = requiresList ? "    " : "";
        if requiresList {
            string listLength;
            if attribute.minOccurrences != attribute.maxOccurrences {  // Variable length.
<?            if (*dataIndex+sizeof(uint32_t) > dataLength) {
                    return false;
            }
            uint32_t ${attributeName}Length = *((uint32_t*)(data+*dataIndex));
            *dataIndex += sizeof(uint32_t);
?>
                listLength = attributeName + "Length";
            } else {  // Fixed length
                listLength = (string)attribute.minOccurrences;
            }
            string collectionIvar = useMaPLInterface ? "._backingVector" : "";
            if attribute.typeIsClass {
<?            for (auto value : ${attributeName}${collectionIvar}) {
                delete value;
            }
?>
            }
<?            ${attributeName}${collectionIvar}.clear();
            ${attributeName}${collectionIvar}.reserve(${listLength});
            for (uint32_t ${attributeName}Index = 0; ${attributeName}Index < ${listLength}; ${attributeName}Index++) {
?>
        }

        // Read ivar values.
        string typeName = attribute.typeName;
        if attribute.typeIsClass {
            string typeNamespace = attribute.typeNamespace;
            SchemaClass attributeClass = schemas[attribute.typeNamespace].classes[typeName];
            if attributeClass.descendantClasses.count > 0 {
<?${indent}            if (*dataIndex+sizeof(uint32_t) > dataLength) {
${indent}                return false;
${indent}            }
${indent}            ${typeNamespace}::${typeName}* createdObject;
${indent}            switch (*((uint32_t*)(data+*dataIndex))) {
${indent}                case BYTECODE_${typeNamespace}_${typeName}:
${indent}                    createdObject = new ${typeNamespace}::${typeName}();
${indent}                    break;
?>
                for uint32 descendantIndex = 0; descendantIndex < attributeClass.descendantClasses.count; descendantIndex++ {
                    SchemaClass descendant = attributeClass.descendantClasses[descendantIndex];
                    string descendantNamespace = descendant.namespace;
                    string descendantName = descendant.name;
<?${indent}                case BYTECODE_${descendantNamespace}_${descendantName}:
${indent}                    createdObject = new ${descendantNamespace}::${descendantName}();
${indent}                    break;
?>
                }
<?${indent}                default:
${indent}                    return false;
${indent}            }
?>
            } else {
<?${indent}            ${typeNamespace}::${typeName}* createdObject = new ${typeNamespace}::${typeName}();
?>
            }
            
            string objectName;
            if requiresList {
                string collectionIvar = useMaPLInterface ? "._backingVector" : "";
<?${indent}            ${attributeName}${collectionIvar}.push_back(createdObject);
?>
            } else {
<?${indent}            ${attributeName} = createdObject;
?>
            }
<?${indent}            if (!createdObject->initializeObjectWithData(data, dataIndex, dataLength)) {
${indent}                return false;
${indent}            }
?>
        } else if attribute.typeIsUIDReference ||
                  typeName == "string" ||
                  typeName == "UID" {
<?${indent}            size_t stringLength = strlen((char*)(data+*dataIndex))+1;
${indent}            if (*dataIndex+stringLength > dataLength) {
${indent}                return false;
${indent}            }
?>
            if requiresList {
                string collectionIvar = useMaPLInterface ? "._backingVector" : "";
<?${indent}            ${attributeName}${collectionIvar}.push_back((char*)(data+*dataIndex));
?>
            } else {
<?${indent}            ${attributeName} = (char*)(data+*dataIndex);
?>
            }
<?${indent}            *dataIndex += stringLength;
?>
        } else {
            string primitiveType;
            if typeName == "int32" {
                primitiveType = "int32_t";
            } else if typeName == "uint32" {
                primitiveType = "uint32_t";
            } else if typeName == "int64" {
                primitiveType = "int64_t";
            } else if typeName == "uint64" {
                primitiveType = "uint64_t";
            } else if typeName == "float32" {
                primitiveType = "float";
            } else if typeName == "float64" {
                primitiveType = "double";
            } else if typeName == "bool" || typeName == "char" {
                primitiveType = "uint8_t";
            } else if attribute.typeIsEnum {
                primitiveType = attribute.typeNamespace + "::" + typeName;
            }
<?${indent}            if (*dataIndex+sizeof(${primitiveType}) > dataLength) {
${indent}                return false;
${indent}            }
?>
            if requiresList {
                string collectionIvar = useMaPLInterface ? "._backingVector" : "";
<?${indent}            ${attributeName}${collectionIvar}.push_back(*((${primitiveType}*)(data+*dataIndex)));
?>
            } else {
<?${indent}            ${attributeName} = *((${primitiveType}*)(data+*dataIndex));
?>
            }
<?${indent}            *dataIndex += sizeof(${primitiveType});
?>
        }

        if requiresList {
<?            }
?>
        }
<?        }
            return true;
?>
    }
<?        default:
            *dataIndex -= sizeof(uint32_t);
?>
    if schemaClass.superclass != NULL {
        string superclassName = schemaClass.superclass.name;
        string superclassNamespace = schemaClass.superclass.namespace;
<?            return ${superclassNamespace}::${superclassName}::initializeAttributeWithData(data, dataIndex, dataLength);
?>
    } else {
<?            return false;
?>
    }
<?    }
}

void ${schemaNamespace}::${className}_generated::writeObjectToVector(std::vector<uint8_t> &data) {
    uint32_t bytecodeSignifier = BYTECODE_${schemaNamespace}_${className};
    data.insert(data.end(), { *((uint8_t *)&bytecodeSignifier), *((uint8_t *)&bytecodeSignifier+1), *((uint8_t *)&bytecodeSignifier+2), *((uint8_t *)&bytecodeSignifier+3) });
    writeAttributesToVector(data);
}

void ${schemaNamespace}::${className}_generated::writeAttributesToVector(std::vector<uint8_t> &data) {
?>
    if schemaClass.attributes.count > 0 {
        <?    uint32_t bytecodeSignifier;
?>
    }
    for uint32 i = 0; i < schemaClass.attributes.count; i++ {
        SchemaAttribute attribute = schemaClass.attributes[i];
        string attributeName = attribute.name;
        
        // Check this value against the default value. Elide if it matches the default.
        // Lists with no default should be considered to have an empty default value.
        bool requiresList = attribute.minOccurrences < 1 || attribute.maxOccurrences > 1;
        bool hasDefaultValue = attribute.defaultValues.count > 0;
        string indent = requiresList || hasDefaultValue ? "    " : "";
        if requiresList || hasDefaultValue {
            string defaultConditional;
            if attribute.defaultValues.count == 1 {
                string defaultValue = attribute.defaultValues[0];
                if attribute.typeIsEnum {
                    defaultValue = attribute.typeNamespace + "::" + attribute.typeName + "_" + defaultValue;
                }
                defaultConditional = attributeName + " != " + defaultValue;
            } else {
                string collectionIvar = useMaPLInterface ? "._backingVector" : "";
                uint32 defaultListCount = hasDefaultValue ? attribute.defaultValues.count : 0;
                defaultConditional = attributeName + collectionIvar + ".size() != " + (string)defaultListCount;
                for uint32 defaultIndex = 0; defaultIndex < attribute.defaultValues.count; defaultIndex++ {
                    string defaultValue = attribute.defaultValues[defaultIndex];
                    if attribute.typeIsEnum {
                        defaultValue = attribute.typeNamespace + "::" + attribute.typeName + "_" + defaultValue;
                    }
                    defaultConditional += "\n        || " + attributeName + collectionIvar + "[" + (string)defaultIndex + "] != " + defaultValue;
                }
            }
<?    if (${defaultConditional}) {
?>
        }
        
        // Specify which variable is being written.
<?${indent}    bytecodeSignifier = BYTECODE_${schemaNamespace}_${className}_${attributeName};
${indent}    data.insert(data.end(), { *((uint8_t *)&bytecodeSignifier), *((uint8_t *)&bytecodeSignifier+1), *((uint8_t *)&bytecodeSignifier+2), *((uint8_t *)&bytecodeSignifier+3) });
?>
        
        // Specify the length if this is a list of variable length.
        if attribute.minOccurrences != attribute.maxOccurrences {
            // Specify the length of this list.
            string collectionIvar = useMaPLInterface ? "._backingVector" : "";
            <?${indent}    bytecodeSignifier = (uint32_t)${attributeName}${collectionIvar}.size();
${indent}    data.insert(data.end(), { *((uint8_t *)&bytecodeSignifier), *((uint8_t *)&bytecodeSignifier+1), *((uint8_t *)&bytecodeSignifier+2), *((uint8_t *)&bytecodeSignifier+3) });
?>
        }
        
        // Specify the variable value.
        string attributeVar = requiresList ? attributeName + "Value" : attributeName;
        if requiresList {
            string collectionIvar = useMaPLInterface ? "._backingVector" : "";
            <?${indent}    for (auto ${attributeVar} : ${attributeName}${collectionIvar}) {
?>
            indent += "    ";
        }
        
        if attribute.typeIsClass {
            <?${indent}    ${attributeVar}->writeObjectToVector(data);
?>
        } else {  // Primitives.
            string typeName = attribute.typeName;
            if attribute.typeIsEnum ||  // Enums are uint32_t.
               typeName == "int32" ||
               typeName == "uint32" ||
               typeName == "float32" {
                <?${indent}    data.insert(data.end(), { *((uint8_t *)&${attributeVar}), *((uint8_t *)&${attributeVar}+1), *((uint8_t *)&${attributeVar}+2), *((uint8_t *)&${attributeVar}+3) });
?>
            } else if typeName == "int64" ||
                      typeName == "uint64" ||
                      typeName == "float64" {
                <?${indent}    data.insert(data.end(), { *((uint8_t *)&${attributeVar}), *((uint8_t *)&${attributeVar}+1), *((uint8_t *)&${attributeVar}+2), *((uint8_t *)&${attributeVar}+3), *((uint8_t *)&${attributeVar}+4), *((uint8_t *)&${attributeVar}+5), *((uint8_t *)&${attributeVar}+6), *((uint8_t *)&${attributeVar}+7) });
?>
            } else if typeName == "bool" {
                if attribute.defaultValues.count == 1 {
                    // In the case that there's exactly 1 default value, we know this is a single bool, which is not the same as the default.
                    // This means there's only a single value that it can be, which should be hard coded.
                    if (bool)attribute.defaultValues[0] {
                        <?${indent}    data.push_back(0);
?>
                    } else {
                        <?${indent}    data.push_back(1);
?>
                    }
                } else {
                    <?${indent}    data.push_back(${attributeVar} ? 1 : 0);
?>
                }
            } else if typeName == "char" {
                <?${indent}    data.push_back(${attributeVar});
?>
            } else if attribute.typeIsUIDReference ||
                      typeName == "string" ||
                      typeName == "UID" {
                <?${indent}    for (size_t i = 0; i < ${attributeVar}.length(); i++) {
${indent}        data.push_back(${attributeVar}[i]);
${indent}    }
${indent}    data.push_back(0);
?>
            }
        }
        
        if requiresList {
            <?${indent}}
?>
        }
        
        if requiresList || hasDefaultValue {
            <?    }
?>
        }
    }
    if schemaClass.superclass != NULL {
        string superclassName = schemaClass.superclass.name;
        string superclassNamespace = schemaClass.superclass.namespace;
        <?    ${superclassNamespace}::${superclassName}::writeAttributesToVector(data);
?>
    }
<?}

?>
}

if useMaPLInterface {
    string symbolPrefix = commandLineFlag("MaPLSymbolPrefix");
<?/**
 * MaPLInterface.
 */
MaPLParameter ${schemaNamespace}::${className}_generated::invokeFunction(MaPLSymbol functionSymbol, const MaPLParameter *argv, MaPLParameterCount argc) {
    if (argc > 0) {
        return MaPLUninitialized();
    }
    switch (functionSymbol) {
?>
    for uint32 i = 0; i < schemaClass.attributes.count; i++ {
        SchemaAttribute attribute = schemaClass.attributes[i];
        string attributeName = attribute.name;
        string functionName;
        bool isString = attribute.typeIsUIDReference || attribute.typeName == "string" || attribute.typeName == "UID";
        bool isList = attribute.minOccurrences < 1 || attribute.maxOccurrences > 1;
        string ivarPrefix = isList ? "&" : "";
        string ivarSuffix = "";
        if isList || attribute.typeIsClass {
            functionName = "MaPLPointer";
        } else if isString {
            functionName = "MaPLStringByReference";
            ivarSuffix = ".c_str()";
        } else if attribute.typeIsEnum || attribute.typeName == "uint32" {
            functionName = "MaPLUint32";
        } else if attribute.typeName == "int32" {
            functionName = "MaPLInt32";
        } else if attribute.typeName == "bool" {
            functionName = "MaPLBool";
        } else if attribute.typeName == "int64" {
            functionName = "MaPLInt64";
        } else if attribute.typeName == "uint64" {
            functionName = "MaPLUint64";
        } else if attribute.typeName == "float32" {
            functionName = "MaPLFloat32";
        } else if attribute.typeName == "float64" {
            functionName = "MaPLFloat64";
        } else { // Char.
            functionName = "MaPLChar";
        }
<?        case ${symbolPrefix}_${schemaNamespace}_${className}_${attributeName}:
            return ${functionName}(${ivarPrefix}${attributeName}${ivarSuffix});
?>
    }
<?        default:
?>
    if schemaClass.superclass == NULL {
<?            return MaPLUninitialized();
?>
    } else {
        string superclassNamespace = schemaClass.superclass.namespace;
        string superclassName = schemaClass.superclass.name;
<?            return ${superclassNamespace}::${superclassName}::invokeFunction(functionSymbol, argv, argc);
?>
    }
<?    }
}

MaPLParameter ${schemaNamespace}::${className}_generated::invokeSubscript(MaPLParameter &index) const {
    return MaPLUninitialized();  // This object doesn't respond to subscripts.
}

void ${schemaNamespace}::${className}_generated::assignProperty(MaPLSymbol propertySymbol, MaPLParameter &assignedValue) {
    switch (propertySymbol) {
?>
    for uint32 i = 0; i < schemaClass.attributes.count; i++ {
        SchemaAttribute attribute = schemaClass.attributes[i];
        if attribute.minOccurrences < 1 || attribute.maxOccurrences > 1 {
            continue;  // Arrays are readonly.
        }
        string attributeName = attribute.name;
        string typeDescriptor;
        string typeCast = "";
        if attribute.typeIsClass {
            typeDescriptor = "pointer";
            typeCast = "(" + schemaNamespace + "::" + attribute.typeName + "*)";
        } else if attribute.typeIsUIDReference || attribute.typeName == "UID" {
            typeDescriptor = "string";
        } else if attribute.typeIsEnum {
            typeDescriptor = "uint32";
            typeCast = "(" + schemaNamespace + "::" + attribute.typeName + ")";
        } else if attribute.typeName == "bool" {
            typeDescriptor = "boolean";
        } else {
            // All other types match the `typeName`.
            typeDescriptor = attribute.typeName;
        }
<?        case ${symbolPrefix}_${schemaNamespace}_${className}_${attributeName}:
            if (assignedValue.dataType != MaPLDataType_${typeDescriptor}) {
                return;
            }
            ${attributeName} = ${typeCast}assignedValue.${typeDescriptor}Value;
?>
    }
<?        default:
            break;
    }
?>
    if schemaClass.superclass != NULL {
        string superclassNamespace = schemaClass.superclass.namespace;
        string superclassName = schemaClass.superclass.name;
<?    return ${superclassNamespace}::${superclassName}::assignProperty(propertySymbol, assignedValue);
?>
    }
<?}

void ${schemaNamespace}::${className}_generated::assignSubscript(MaPLParameter index, MaPLParameter &assignedValue) {
    // No-op. This object doesn't respond to subscripts.
}
?>
}
