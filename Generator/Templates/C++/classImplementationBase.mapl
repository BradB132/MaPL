#import "../../Executable/MaPLGeneratorAPI.mapl"

Schema schema = (Schema)inParameters["schema"];
SchemaClass schemaClass = (SchemaClass)inParameters["class"];

string schemaNamespace = schema.namespace;
string className = schemaClass.name;

string outputDir = commandLineFlag("cppOutputDir");
outputToFile(outputDir + "/" + schemaNamespace + "/" + className + "_generated.cpp");

<?// Generated by MaPLGenerator, based on the '${schemaNamespace}::${className}' schema.

#include "${className}_generated.h"

${className}_generated::${className}_generated()?>
for uint32 attrIndex = 0; attrIndex < schemaClass.attributes.count; attrIndex++ {
    SchemaAttribute attribute = schemaClass.attributes[attrIndex];
    if attribute.defaultValues.count > 0 {
        string attributeName = attribute.name;
        string attributeValue;
        if attribute.defaultValues.count == 1 {
            string defaultValue = attribute.defaultValues[0];
            if attribute.typeIsEnum {
                attributeValue = attribute.typeName + "_" + defaultValue;
            } else {
                attributeValue = defaultValue;
            }
        } else {
            attributeValue = "{ ";
            for uint32 defaultIndex = 0; defaultIndex < attribute.defaultValues.count; defaultIndex++ {
                string defaultValue = attribute.defaultValues[defaultIndex];
                if attribute.typeIsEnum {
                    attributeValue += attribute.typeName + "_" + defaultValue;
                } else {
                    attributeValue += defaultValue;
                }
                if defaultIndex < attribute.defaultValues.count-1 {
                    attributeValue +=  ", ";
                }
            }
            attributeValue += " }";
        }
        <?
    ${attributeName}(${attributeValue}),?>
    }
}
<? {
}

${className}_generated::~${className}_generated() {
?>
for uint32 attrIndex = 0; attrIndex < schemaClass.attributes.count; attrIndex++ {
    SchemaAttribute attribute = schemaClass.attributes[attrIndex];
    if attribute.typeIsClass && (attribute.minOccurrences < 1 || attribute.maxOccurrences > 1) {
        string dataType = attribute.typeNamespace + "::" + attribute.typeName;
        string attributeName = attribute.name;
<?    for (${dataType} *value : ${attributeName}) {
        delete value;
    }
?>
    }
}
<?}

?>

bool useMaPLInterface = (bool)commandLineFlag("MaPLInterface");

if (bool)commandLineFlag("MaPLGeneratorSerialized") {
<?/**
 * MaPLGeneratorSerialized.
 */
bool ${schemaNamespace}::${className}_generated::initializeWithData(uint8_t *data, size_t *dataIndex, size_t dataLength) {

}

void ${schemaNamespace}::${className}_generated::writeDataToVector(std::vector<uint8_t> &data) {
    uint32_t bytecodeSignifier = BYTECODE_${schemaNamespace}_${className};
    data.insert(data.end(), { *((uint8_t *)&bytecodeSignifier), *((uint8_t *)&bytecodeSignifier+1), *((uint8_t *)&bytecodeSignifier+2), *((uint8_t *)&bytecodeSignifier+3) });
?>
    for uint32 i = 0; i < schemaClass.attributes.count; i++ {
        SchemaAttribute attribute = schemaClass.attributes[i];
        string attributeName = attribute.name;
        
        // Check this value against the default value. Elide if it matches the default.
        bool hasDefaultValue = attribute.defaultValues.count > 0;
        string indent = hasDefaultValue ? "    " : "";
        if hasDefaultValue {
            string defaultConditional;
            if attribute.defaultValues.count == 1 {
                defaultConditional = attributeName + " != " + attribute.defaultValues[0];
            } else {
                string collectionIvar = useMaPLInterface ? "._backingVector" : "";
                defaultConditional = attributeName + collectionIvar + ".size() != " + (string)attribute.defaultValues.count;
                for uint32 defaultIndex = 0; defaultIndex < attribute.defaultValues.count; defaultIndex++ {
                    defaultConditional += "\n        || " + attributeName + collectionIvar + "[" + (string)defaultIndex + "] != " + attribute.defaultValues[defaultIndex];
                }
            }
<?    if (${defaultConditional}) {
?>
        }
        
        // Specify which variable is being written.
<?${indent}    bytecodeSignifier = BYTECODE_${schemaNamespace}_${className}_${attributeName};
${indent}    data.insert(data.end(), { *((uint8_t *)&bytecodeSignifier), *((uint8_t *)&bytecodeSignifier+1), *((uint8_t *)&bytecodeSignifier+2), *((uint8_t *)&bytecodeSignifier+3) });
?>
        
        // Specify the length if this is a list.
        if attribute.minOccurrences != attribute.maxOccurrences {
            // Specify the length of this list.
            string collectionIvar = useMaPLInterface ? "._backingVector" : "";
            <?${indent}    bytecodeSignifier = ${attributeName}${collectionIvar}.count();
${indent}    data.insert(data.end(), { *((uint8_t *)&bytecodeSignifier), *((uint8_t *)&bytecodeSignifier+1), *((uint8_t *)&bytecodeSignifier+2), *((uint8_t *)&bytecodeSignifier+3) });
?>
        }
        
        // Specify the variable value.
        bool requiresList = attribute.minOccurrences < 1 || attribute.maxOccurrences > 1;
        string attributeVar = requiresList ? attributeName + "Value" : attributeName;
        if requiresList {
            string collectionIvar = useMaPLInterface ? "._backingVector" : "";
            <?${indent}    for (auto ${attributeVar} : ${attributeName}${collectionIvar}) {
?>
            indent += "    ";
        }
        
        if attribute.typeIsClass {
            string accessorSyntax = hasDefaultValue || requiresList ? "->" : ".";
            <?${indent}    ${attributeVar}${accessorSyntax}writeDataToVector(data);
?>
        } else {  // Primitives.
            string typeName = attribute.typeName;
            if attribute.typeIsEnum ||  // Enums are uint32_t.
               typeName == "int32" ||
               typeName == "uint32" ||
               typeName == "float32" {
                <?${indent}    data.insert(data.end(), { *((uint8_t *)&${attributeVar}), *((uint8_t *)&${attributeVar}+1), *((uint8_t *)&${attributeVar}+2), *((uint8_t *)&${attributeVar}+3) });
?>
            } else if typeName == "int64" ||
                      typeName == "uint64" ||
                      typeName == "float64" {
                <?${indent}    data.insert(data.end(), { *((uint8_t *)&${attributeVar}), *((uint8_t *)&${attributeVar}+1), *((uint8_t *)&${attributeVar}+2), *((uint8_t *)&${attributeVar}+3), *((uint8_t *)&${attributeVar}+4), *((uint8_t *)&${attributeVar}+5), *((uint8_t *)&${attributeVar}+6), *((uint8_t *)&${attributeVar}+7) });
?>
            } else if typeName == "bool" {
                if attribute.defaultValues.count == 1 {
                    // In the case that there's exactly 1 default value, we know this is a single bool, which is not the same as the default.
                    // This means there's only a single value that it can be, which should be hard coded.
                    if (bool)attribute.defaultValues[0] {
                        <?${indent}    data.push_back(0);
?>
                    } else {
                        <?${indent}    data.push_back(1);
?>
                    }
                } else {
                    <?${indent}    data.push_back(${attributeVar} ? 1 : 0);
?>
                }
            } else if typeName == "char" {
                <?${indent}    data.push_back(${attributeVar});
?>
            } else if attribute.typeIsUIDReference ||
                      typeName == "string" ||
                      typeName == "UID" {
                <?${indent}    for (size_t i = 0; i < ${attributeVar}.length(); i++) {
${indent}        data.push_back(${attributeVar}[i]);
${indent}    }
${indent}    data.push_back(0);
?>
            }
        }
        
        if requiresList {
            <?${indent}}
?>
        }
        
        if hasDefaultValue {
            <?    }
?>
        }
        
    }
<?}

?>
}

if useMaPLInterface {
<?/**
 * MaPLInterface.
 */
MaPLParameter ${schemaNamespace}::${className}_generated::invokeFunction(MaPLSymbol functionSymbol, const MaPLParameter *argv, MaPLParameterCount argc) {

}

MaPLParameter ${schemaNamespace}::${className}_generated::invokeSubscript(MaPLParameter index) const {

}

void ${schemaNamespace}::${className}_generated::assignProperty(MaPLSymbol propertySymbol, MaPLParameter assignedValue) {

}

void ${schemaNamespace}::${className}_generated::assignSubscript(MaPLParameter index, MaPLParameter assignedValue) {

}

?>
}
