#import "../../Executable/MaPLGeneratorAPI.mapl"

Schema schema = (Schema)inParameters["schema"];
SchemaClass schemaClass = (SchemaClass)inParameters["class"];

string schemaNamespace = schema.namespace;
string className = schemaClass.name;

string outputDir = commandLineFlag("cppOutputDir");
outputToFile(outputDir + "/" + schemaNamespace + "/" + className + "_generated.cpp");

<?// Generated by MaPLGenerator, based on the '${schemaNamespace}::${className}' schema.

${className}_generated::~${className}_generated() {
?>
for uint32 attrIndex = 0; attrIndex < schemaClass.attributes.count; attrIndex++ {
    SchemaAttribute attribute = schemaClass.attributes[attrIndex];
    if attribute.typeIsClass && (attribute.minOccurrences < 1 || attribute.maxOccurrences > 1) {
        string dataType = attribute.typeNamespace + "::" + attribute.typeName;
        string attributeName = attribute.name;
<?    for (${dataType} *value : ${attributeName}) {
        delete value;
    }
?>
    }
}
<?}

?>

if (bool)commandLineFlag("MaPLGeneratorSerialized") {
<?/**
 * MaPLGeneratorSerialized.
 */
void ${schemaNamespace}::${className}_generated::initializeWithData(uint8_t *data, size_t *dataIndex, size_t dataLength) {

}

void ${schemaNamespace}::${className}_generated::writeDataToVector(std::vector<uint8_t> &data) {

}

?>
}

if (bool)commandLineFlag("MaPLInterface") {
<?/**
 * MaPLInterface.
 */
MaPLParameter ${schemaNamespace}::${className}_generated::invokeFunction(MaPLSymbol functionSymbol, const MaPLParameter *argv, MaPLParameterCount argc) {

}

MaPLParameter ${schemaNamespace}::${className}_generated::invokeSubscript(MaPLParameter index) const {

}

void ${schemaNamespace}::${className}_generated::assignProperty(MaPLSymbol propertySymbol, MaPLParameter assignedValue) {

}

void ${schemaNamespace}::${className}_generated::assignSubscript(MaPLParameter index, MaPLParameter assignedValue) {

}

?>
}
