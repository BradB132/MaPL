#import "../../Executable/MaPLGeneratorAPI.mapl"

Schema schema = (Schema)inParameters["schema"];
string schemaNamespace = schema.namespace;

string outputDir = commandLineFlag("cppOutputDir");
outputToFile(outputDir + "/MaPLInterface.h");

<?// Generated by MaPLGenerator.

#ifndef MaPLInterface_h
#define MaPLInterface_h

#include <vector>

#include "MaPLRuntime.h"

/**
 * Abstract class that can be used for any MaPL API.
 */
class MaPLInterface {
public:
    virtual MaPLParameter invokeFunction(MaPLSymbol functionSymbol, const MaPLParameter *argv, MaPLParameterCount argc) = 0;
    virtual MaPLParameter invokeSubscript(MaPLParameter index) const = 0;
    virtual void assignProperty(MaPLSymbol propertySymbol, MaPLParameter assignedValue) = 0;
    virtual void assignSubscript(MaPLParameter index, MaPLParameter assignedValue) = 0;
};

/**
 * Array class that implements MaPLInterface and can contain the MaPLRuntime types.
 */
template <typename T>
class MaPLArray : public MaPLInterface {
public:
    virtual MaPLParameter invokeFunction(MaPLSymbol functionSymbol, const MaPLParameter *argv, MaPLParameterCount argc) {
        if (argc == 1 && argv[0].dataType == MaPLDataType_uint32) {
            // Assume this is attempting to check the length of the array.
            return MaPLUint32((uint32_t)_backingVector.size());
        }
        return MaPLUninitialized();
    }
    
    virtual MaPLParameter invokeSubscript(MaPLParameter index) const {
        const T &value = _backingVector[index.uint32Value];
        if constexpr (std::is_same_v<T, u_int8_t>) {
            return MaPLChar(value);
        }
        if constexpr (std::is_same_v<T, int32_t>) {
            return MaPLInt32(value);
        }
        if constexpr (std::is_same_v<T, int64_t>) {
            return MaPLInt64(value);
        }
        if constexpr (std::is_same_v<T, u_int32_t>) {
            return MaPLUint32(value);
        }
        if constexpr (std::is_same_v<T, u_int64_t>) {
            return MaPLUint64(value);
        }
        if constexpr (std::is_same_v<T, float>) {
            return MaPLFloat32(value);
        }
        if constexpr (std::is_same_v<T, double>) {
            return MaPLFloat64(value);
        }
        if constexpr (std::is_same_v<T, bool>) {
            return MaPLBool(value);
        }
        if constexpr (std::is_same_v<T, std::string>) {
            return MaPLStringByValue(value.c_str());
        }
        if constexpr (std::is_pointer_v<T>) {
            return MaPLPointer(value);
        }
        return MaPLUninitialized();
    }
    
    virtual void assignProperty(MaPLSymbol propertySymbol, MaPLParameter assignedValue) {
        // No-op. No assignable properties.
    }

    virtual void assignSubscript(MaPLParameter index, MaPLParameter assignedValue) {
        if (index.dataType != MaPLDataType_uint32) {
            return;
        }
        if constexpr (std::is_same_v<T, u_int8_t>) {
            _backingVector[index.uint32Value] = assignedValue.charValue;
        }
        if constexpr (std::is_same_v<T, int32_t>) {
            _backingVector[index.uint32Value] = assignedValue.int32Value;
        }
        if constexpr (std::is_same_v<T, int64_t>) {
            _backingVector[index.uint32Value] = assignedValue.int64Value;
        }
        if constexpr (std::is_same_v<T, u_int32_t>) {
            _backingVector[index.uint32Value] = assignedValue.uint32Value;
        }
        if constexpr (std::is_same_v<T, u_int64_t>) {
            _backingVector[index.uint32Value] = assignedValue.uint64Value;
        }
        if constexpr (std::is_same_v<T, float>) {
            _backingVector[index.uint32Value] = assignedValue.float32Value;
        }
        if constexpr (std::is_same_v<T, double>) {
            _backingVector[index.uint32Value] = assignedValue.float64Value;
        }
        if constexpr (std::is_same_v<T, bool>) {
            _backingVector[index.uint32Value] = assignedValue.booleanValue;
        }
        if constexpr (std::is_same_v<T, std::string>) {
            _backingVector[index.uint32Value] = assignedValue.stringValue;
        }
        if constexpr (std::is_pointer_v<T>) {
            _backingVector[index.uint32Value] = (T)assignedValue.pointerValue;
        }
    }
    std::vector<T> _backingVector;
};

#endif /* MaPLInterface_h */
?>
