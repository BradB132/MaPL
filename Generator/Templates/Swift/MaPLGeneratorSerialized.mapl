#import "../../Executable/MaPLGeneratorAPI.mapl"

string outputDir = commandLineFlag("swiftOutputDir");
outputToFile(outputDir + "/MaPLGeneratorSerialized.swift");

<?// Generated by MaPLGenerator.

import Foundation

enum MaPLGeneratorSerializedParseStatus {
    case success
    case error
    case completed
}

/**
 * Describes how generated objects are serialized / deserialized.
 */
protocol MaPLGeneratorSerialized {
    mutating func initializeObject(withData data: [UInt8], dataIndex: inout Int) -> Bool
    mutating func initializeAttribute(withData data: [UInt8], dataIndex: inout Int) -> MaPLGeneratorSerializedParseStatus
    func writeObject(toData data: inout Data)
    func writeAttributes(toData data: inout Data)
}

?>

for uint32 schemaIndex = 0; schemaIndex < schemas.count; schemaIndex++ {
    Schema schema = schemas[schemaIndex];
    string schemaNamespace = schema.namespace;

    for uint32 classIndex = 0; classIndex < schema.classes.count; classIndex++ {
        SchemaClass schemaClass = schema.classes[classIndex];
        string classHashName = schemaClass.annotations.contains("originalName") ? schemaClass.annotations["originalName"] : schemaClass.name;
        uint32 beginClassHash = (uint32)hash("CLASS_BEGIN_" + schemaNamespace + "_" + classHashName);
        uint32 endClassHash = (uint32)hash("CLASS_END_" + schemaNamespace + "_" + classHashName);
<?let BYTECODE_${schemaNamespace}_${schemaClass.name}_BEGIN: UInt32 = ${beginClassHash}
let BYTECODE_${schemaNamespace}_${schemaClass.name}_END: UInt32 = ${endClassHash}
?>
        
        for uint32 attrIndex = 0; attrIndex < schemaClass.attributes.count; attrIndex++ {
            SchemaAttribute attribute = schemaClass.attributes[attrIndex];
            if attribute.annotations.contains("omit") {
                continue;
            }
            string attributeHashName = attribute.annotations.contains("originalName") ? attribute.annotations["originalName"] : attribute.name;
            uint32 attributeHash = (uint32)hash("ATTRIBUTE_" + schemaNamespace + "_" + classHashName + "_" + attributeHashName);
            <?let BYTECODE_${schemaNamespace}_${schemaClass.name}_${attribute.name}: UInt32 = ${attributeHash}
?>
        }
        <?
?>
    }
}
